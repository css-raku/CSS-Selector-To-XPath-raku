["*",				"//*"]
["e",				"//e"]
["e f",				"//e//f"]
["e > f",			"//e/f"]
["e, f",			"//e | //f"]
["p.pastoral.marine",		"//p[contains(concat(' ', normalize-space(@class), ' '), ' pastoral ')][contains(concat(' ', normalize-space(@class), ' '), ' marine ')]"]
["e:first-child",		"//e[count(preceding-sibling::*) = 0 and parent::*]"]
["f > e:first-child",		"//f/e[count(preceding-sibling::*) = 0 and parent::*]"]
["e:lang(en)",			"//e[@xml:lang='en' or starts-with(@xml:lang, 'en-')]"]
["e + f",			"//e/following-sibling::*[1]/self::f"]
["e + #bar",			"//e/following-sibling::*[1]/self::*[@id='bar']"]
["e + .bar",			"//e/following-sibling::*[1]/self::*[contains(concat(' ', normalize-space(@class), ' '), ' bar ')]"]
["e[foo]",			"//e[@foo]"]
["e[foo=warning]",		"//e[@foo='warning']"]
["e[foo=\"warning\"]",		"//e[@foo='warning']"]
["e[foo~=\"warning\"]",		"//e[contains(concat(' ', @foo, ' '), ' warning ')]"]
["e[foo^=\"warning\"]",		"//e[starts-with(@foo, 'warning')]"]
["e:not([foo^=\"warning\"])",	"//e[not(starts-with(@foo, 'warning'))]"]
["e[foo$=\"warning\"]",		"//e[substring(@foo, string-length(@foo)-6)='warning']"]
["E[lang|=\"en\"]",		"//E[@lang='en' or starts-with(@lang, 'en-')]"]
["DIV.warning",			"//DIV[contains(concat(' ', normalize-space(@class), ' '), ' warning ')]"]
["E#myid",			"//E[@id='myid']"]
["p:not(#me)",			"//p[not(@id='me')]"]
["foo.bar, bar",		"//foo[contains(concat(' ', normalize-space(@class), ' '), ' bar ')] | //bar"]
["E:nth-child(1)",		"//E[count(preceding-sibling::*) = 0 and parent::*]"]
["E:last-child",		"//E[count(following-sibling::*) = 0 and parent::*]"]
["F E:last-child",		"//F//E[count(following-sibling::*) = 0 and parent::*]"]
["F > E:last-child",		"//F/E[count(following-sibling::*) = 0 and parent::*]"]
["E[href*=\"bar\"]",		"//E[contains(@href, 'bar')]"]
["E[href*=bar]",		"//E[contains(@href, 'bar')]"]
["E:not([href*=\"bar\"])",	"//E[not(contains(@href, 'bar'))]"]
["F > E:nth-of-type(3)",	"//F/E[3]"]
["e ~ f",			"//e/following-sibling::f"]
["e ~ f.foo",			"//e/following-sibling::f[contains(concat(' ', normalize-space(@class), ' '), ' foo ')]"]
["E:contains(\"Hello\")",	"//E[text()[contains(string(.), 'Hello')]]"]
["E:contains( \"Hello\" ) .C",	"//E[text()[contains(string(.), 'Hello')]]//*[contains(concat(' ', normalize-space(@class), ' '), ' C ')]"]
["F, E:contains( \"Hello\" )",	"//F | //E[text()[contains(string(.), 'Hello')]]"]
["E:contains( \"Hello\" ), F",	"//E[text()[contains(string(.), 'Hello')]] | //F"]
["E ~ #bar",			"//E/following-sibling::*[@id='bar']"]
["E ~ .bar",			"//E/following-sibling::*[contains(concat(' ', normalize-space(@class), ' '), ' bar ')]"]
["E ~ *",			"//E/following-sibling::*"]
[".foo ~ E",			"//*[contains(concat(' ', normalize-space(@class), ' '), ' foo ')]/following-sibling::E"]
[".foo ~ *",			"//*[contains(concat(' ', normalize-space(@class), ' '), ' foo ')]/following-sibling::*"]
[".foo ~ .bar",			"//*[contains(concat(' ', normalize-space(@class), ' '), ' foo ')]/following-sibling::*[contains(concat(' ', normalize-space(@class), ' '), ' bar ')]"]
["todo",			"is this a valid selector?"]
["> em",			"//*/em"]
[":first-child",		"//*[count(preceding-sibling::*) = 0 and parent::*]"]
[":last-child",			"//*[count(following-sibling::*) = 0 and parent::*]"]
["E.c:first-child",		"//E[contains(concat(' ', normalize-space(@class), ' '), ' c ')][count(preceding-sibling::*) = 0 and parent::*]"]
["E:first-child.c",		"//E[count(preceding-sibling::*) = 0 and parent::*][contains(concat(' ', normalize-space(@class), ' '), ' c ')]"]
["E#i:first-child",		"//E[@id='i'][count(preceding-sibling::*) = 0 and parent::*]"]
["E:first-child#i",		"//E[count(preceding-sibling::*) = 0 and parent::*][@id='i']"]
[":lang(c)",			"//*[@xml:lang='c' or starts-with(@xml:lang, 'c-')]"]
[":lang(c)#i",			"//*[@xml:lang='c' or starts-with(@xml:lang, 'c-')][@id='i']"]
["#i:lang(c)",			"//*[@id='i'][@xml:lang='c' or starts-with(@xml:lang, 'c-')]"]
["E:lang(c)#i",			"//E[@xml:lang='c' or starts-with(@xml:lang, 'c-')][@id='i']"]
["E#i:lang(c)",			"//E[@id='i'][@xml:lang='c' or starts-with(@xml:lang, 'c-')]"]
["*:lang(c)#i:first-child",	"//*[@xml:lang='c' or starts-with(@xml:lang, 'c-')][@id='i'][count(preceding-sibling::*) = 0 and parent::*]"]
["E:lang(c):first-child#i",	"//E[@xml:lang='c' or starts-with(@xml:lang, 'c-')][count(preceding-sibling::*) = 0 and parent::*][@id='i']"]
["E#i:lang(c):first-child",	"//E[@id='i'][@xml:lang='c' or starts-with(@xml:lang, 'c-')][count(preceding-sibling::*) = 0 and parent::*]"]
["#bar",			"//*[@id='bar']"]
["*[foo]",			"//*[@foo]"]
["[foo]",			"//*[@foo]"]
[".warning",			"//*[contains(concat(' ', normalize-space(@class), ' '), ' warning ')]"]
[":nth-child(1)",		"//*[count(preceding-sibling::*) = 0 and parent::*]"]
["E:nth-child(2)",		"//E[count(preceding-sibling::*) = 1 and parent::*]"]
["E:nth-child(even)",		"//E[count(preceding-sibling::*) mod 2 = 1 and parent::*]"]
["E:nth-child(2n)",		"//E[count(preceding-sibling::*) mod 2 = 1 and parent::*]"]
["E:nth-child(2n+1)",		"//E[count(preceding-sibling::*) mod 2 = 0 and parent::*]"]
["E:nth-child(odd)",		"//E[count(preceding-sibling::*) mod 2 = 0 and parent::*]"]
[":root",			"/*"]
["E:root",			"/E"]
["E:empty",			"//E[not(* or text())]"]
[":empty",			"//*[not(* or text())]"]
["p , :root",			"//p | /*"]
["p , q",			"//p | //q"]
["div *:not(p) em",		"//div//*[not(self::p)]//em"]
["a:not(.external)[href]",	"//a[not(contains(concat(' ', normalize-space(@class), ' '), ' external '))][@href]"]
["div em:only-child",		"//div//em[count(preceding-sibling::*) = 0 and count(following-sibling::*) = 0 and parent::*]"]
["[x=abc]",			"//*[@x='abc']"]
["[x=a-bc]",			"//*[@x='a-bc']"]
["[x=abc-]",			"//*[@x='abc-']"]
["[x=ab--c]",			"//*[@x='ab--c']"]
["option:not([value=\"\"])",	"//option[not(@value='')]"]
["option[ value=\"\" ]",	"//option[@value='']"]
["tr:not([class=\"wanted\"])",	"//tr[not(@class='wanted')]"]
["form[name='foo']",		"//form[@name='foo']"]
["E:last-of-type",		"//E[last()]"]
["E:disabled",			"//E[@disabled]"]
["E:selected",			"//E[@selected]"]
["E:checked",			"//E[@checked]"]
// A few tests from the CSS::Modules::CSS3::Selector test suite
["foo|h1",                      "//foo:h1"]
["*|h1",                        "//*:h1"]
["tr:nth-child( -n+ 6 )",       "//tr[count(preceding-sibling::*) < 5 and parent::*]"]
